
###setup###
add ssh to gitlab https://app.getpocket.com/read/1594318835
add project to gitlab with README.md
add gitignore http://gitignore.io/
create an empty app folder
create Dockerfile
create requirements.txt (include django 2.2 and djangorestframework)
run docker build .
create docker-compose.yml
run docker-compose build
run docker-compose run app sh -c "django-admin.py startproject app ."
  # app is the one indicated in services
  # sh -c is optional, but makes it clear we are running a seperate shell script command
  # the command starts a new project called app and it says start the project in our current location now because this process is going
git add .
git commit -a -m "setup docker and django project"
enable repository in https://travis-ci.org/
create .travis.yml
add flake8 to requirements.txt
commit changes to Github
check travis-ci.org to see how the build went

start a core app
    run docker-compose run app sh -c "python manage.py startapp core"
    delete tests.py as we will have a separate folder for tests, delete views;
    create a tests folder with __init__.py, and test_models.py inside it
    create model tests at test_modules.py
    create models at models.py
    change settings.py (insert 'core' in INSTALLED_APPS list; in this case we add AUTH_USER_MODEL = 'core.User' )
    run docker-compose run app sh -c "python manage.py makemigrations core" #passing core (specifying the app in which we want to run migrations) is not necessarily required
    create admin tests at test_admin.py
    create admin classes at admin.py

setup postgres
    change requirements.txt
    change docker-compose
    change Dockerfile
    change settings.py

create admin user (docker-compose run app sh -c "python manage.py createsuperuser")
    test123 (password for now)

start a user app
    docker-compose run --rm app sh -c "python manage.py startapp user"
        --rm removes the container after it's ran the command. You can include this optionally on any commands that you just want to run once and you don't want the docker container to linger on the system after it's ran. So basically if we add the rm command it should remove the container and just keep the system a little cleaner so it doesn't fill up. It's not a big deal if you don't include this because as soon as you type docker-compose down it removes them all anyways so it's quite easy to clean up but it's nice to do it just to make sure we don't run out of space or anything.
    remove the migrations folder, admin.py, models.py, tests.py from user app
        because we're going to keep all of them within the core app, and will create a new subfolder for tests.
    create a tests folder with __init__.py in it
    make changes to settings.py
        in INSTALLED_APPS add 'rest_framework', 'rest_framework.authtoken', users
    add a test_user_api.py under tests
    add serializers.py
    add urls.py
    add views.py
    modify main directory urls.py


Travis CI
Travis is a really useful continuous integration tool that lets us automate some of the tests and checks on our project every time we push it to Github.
  For example every time we push a change to github we can make it run our Python unit tests and our Python linting so if there is any issues with our code we can see straight away via an email notification that the build is broken.
steps
  sign up with github
  find repository
  check box to enable travis ci on it
The Travis CI configuration file is the file that tells Travis what to do every time we push a change to our project.
.travis.yml

flake8
flake8 tests if the code adheres to pep8 styles and other readability issues
https://stackoverflow.com/questions/47876079/how-to-tell-flake8-to-ignore-comments
add some exclusions because we're going to exclude some of the automated scripts and tools
  that are created by Django because Django work to a 100 character limit whereas I like to work my projects to the 79 character (recommended by Python guidelines) limit and so I exclude all the Django stuff so it doesn't fail on the linting when you run that. So we're going to exclude migrations, we're going to exclude pycache, we're going to exclude manage.py and finally settings.py ok let's save that. Next we can commit and push our

tests
create tests.py
docker-compose run app sh -c "python manage.py test"
docker-compose run app sh -c "python manage.py test && flake8"

calc.py
def add(x, y):
    """Add two numbers together"""
    return x+y
def subtract(x, y):
    """Subtract x from y and return value"""
    return y-x
tests.py
# the Django unit test framework looks for any files that begin with tests and it basically uses them as the tests when you run the Django run unit tests command
from django.test import TestCase
from app.calc import add, subtract
class CalcTests(TestCase):
    def test_add_numbers(self):  # all django test functions must begin with test
        """Test that two numbers are added together"""
        self.assertEqual(add(3, 8), 11)  # pass inputs and expected result
    def test_subtract_numbers(self):
        """Test that values are subtracted and returned"""
        self.assertEqual(subtract(5, 11), 6)

So you don't need to test features that are specific to the frameworks or external modules that you're using in your project. you need to rely on the other products testing their own code

Mocking testing
Mocking is when you override or change the behavior of the dependencies of the code that you're testing. We use mocking to avoid any unintended side effects and also to isolate the specific piece of code that we want to test.
